import { ethers } from "hardhat";
import fs from "fs";
import path from "path";

async function main() {
  console.log("🚀 Starting Vitrine Marketplace deployment (without Jury)...");

  const [deployer] = await ethers.getSigners();
  console.log("📋 Deploying contracts with account:", deployer.address);
  
  const balance = await deployer.provider.getBalance(deployer.address);
  console.log("💰 Account balance:", ethers.formatEther(balance), "ETH");

  // --- 1. DEPLOY DOS CONTRATOS ---
  console.log("\n📦 Deploying Core Contracts...");

  // Deploy VitrineCore
  console.log("Deploying VitrineCore...");
  const VitrineCore = await ethers.getContractFactory("VitrineCore");
  const vitrineCore = await VitrineCore.deploy();
  await vitrineCore.waitForDeployment();
  const vitrineCoreAddress = await vitrineCore.getAddress();
  console.log("✅ VitrineCore deployed to:", vitrineCoreAddress);

  // Deploy Marketplace
  console.log("Deploying Marketplace...");
  const feeRecipientAddress = deployer.address;
  const Marketplace = await ethers.getContractFactory("Marketplace");
  const marketplace = await Marketplace.deploy(vitrineCoreAddress, feeRecipientAddress);
  await marketplace.waitForDeployment();
  const marketplaceAddress = await marketplace.getAddress();
  console.log("✅ Marketplace deployed to:", marketplaceAddress);

  // --- 2. CONFIGURAÇÃO PÓS-DEPLOY ---
  console.log("\n⚙️ Setting up contract connections...");

  try {
    await vitrineCore.setMarketplaceContract(marketplaceAddress);
    console.log("✅ Marketplace address set in VitrineCore");
  } catch (error: any) {
    console.log("⚠️  Could not set marketplace in VitrineCore:", error.message);
  }

  // --- 3. VERIFICAÇÃO ---
  console.log("\n🔍 Verifying contract setup...");
  
  try {
    const marketplaceInCore = await vitrineCore.marketplaceContract();
    console.log("✅ VitrineCore.marketplaceContract:", marketplaceInCore);
    
    const productCounter = await marketplace.getProductCounter();
    console.log("✅ Marketplace initial product counter:", productCounter.toString());
  } catch (error: any) {
    console.log("⚠️  Some verification checks failed:", error.message);
  }

  // --- 4. SALVAR ARTEFATOS ---
  const network = await ethers.provider.getNetwork();
  const networkName = network.name === "unknown" ? "localhost" : network.name;
  const chainId = network.chainId.toString();
  
  console.log(`\n💾 Saving deployment info for network: ${networkName} (Chain ID: ${chainId})`);
  
  const contractInfo = {
    VitrineCore: { address: vitrineCoreAddress },
    Marketplace: { address: marketplaceAddress },
  };
  
  saveDeploymentJson(networkName, contractInfo, chainId);
  updateEnvFiles(chainId, {
    VITRINE_CORE_ADDRESS: vitrineCoreAddress,
    MARKETPLACE_ADDRESS: marketplaceAddress,
  });
  copyAbisToFrontend(["VitrineCore", "Marketplace"]);

  // --- 5. RESUMO FINAL ---
  console.log("\n🎉 Deployment completed successfully!");
  console.log("📋 Contract Summary:");
  console.log(`   VitrineCore:  ${vitrineCoreAddress}`);
  console.log(`   Marketplace:  ${marketplaceAddress}`);
  console.log(`   Network:      ${networkName} (Chain ID: ${chainId})`);
  console.log(`   Fee Recipient: ${feeRecipientAddress}`);
  console.log("\n💡 Note: Jury system disabled for now. Disputes can be resolved manually by owner.");
  
  // Mostrar primeiro produto para teste
  console.log("\n🧪 Ready for testing:");
  console.log("   1. Connect wallet to Hardhat network (Chain ID: 31337)");
  console.log("   2. Use frontend to list your first product");
  console.log("   3. Test purchase flow");
}

// --- FUNÇÕES AUXILIARES ---
function saveDeploymentJson(networkName: string, contracts: { [name: string]: { address: string } }, chainId: string) {
  const deploymentsDir = path.join(__dirname, "..", "deployments");
  if (!fs.existsSync(deploymentsDir)) {
    fs.mkdirSync(deploymentsDir, { recursive: true });
  }
  
  const deploymentInfo = {
    network: networkName,
    chainId: chainId,
    deployedAt: new Date().toISOString(),
    contracts,
    note: "Jury system disabled - only VitrineCore and Marketplace deployed"
  };
  
  const deploymentFile = path.join(deploymentsDir, `${networkName}.json`);
  fs.writeFileSync(deploymentFile, JSON.stringify(deploymentInfo, null, 2));
  console.log(`   - Deployment info saved to: deployments/${networkName}.json`);
}

function updateEnvFiles(chainId: string, addresses: { [name: string]: string }) {
  // Frontend .env
  const frontendEnvPath = path.join(__dirname, "..", "frontend", ".env");
  let envContent = `# Vitrine Marketplace - Generated by deploy script
# Backend API
VITE_API_BASE_URL=http://localhost:8000
VITE_API_TIMEOUT=10000

# Smart Contracts
VITE_VITRINE_CORE_ADDRESS=${addresses.VITRINE_CORE_ADDRESS}
VITE_MARKETPLACE_ADDRESS=${addresses.MARKETPLACE_ADDRESS}

# Blockchain
VITE_WEB3_PROVIDER_URL=http://127.0.0.1:8545
VITE_CHAIN_ID=${chainId}

# Features
VITE_ENABLE_CESS_STORAGE=true
VITE_ENABLE_REAL_PAYMENTS=false
VITE_MAX_FILE_SIZE=10485760
VITE_MAX_FILES_PER_PRODUCT=5

# UI
VITE_APP_NAME="Vitrine Marketplace"
VITE_APP_VERSION="0.1.0"
VITE_DEBUG=true

# WalletConnect (opcional)
VITE_WALLETCONNECT_PROJECT_ID=c83bfd700be4b60b6024399e74aadb30
`;

  if (!fs.existsSync(path.dirname(frontendEnvPath))) {
    fs.mkdirSync(path.dirname(frontendEnvPath), { recursive: true });
  }
  
  fs.writeFileSync(frontendEnvPath, envContent);
  console.log(`   - Frontend .env updated with contract addresses`);
}

function copyAbisToFrontend(contractNames: string[]) {
  console.log('\n🔄 Copying contract ABIs to frontend...');
  
  const frontendAbiPath = path.join(__dirname, '..', 'frontend', 'src', 'abi');
  if (!fs.existsSync(frontendAbiPath)) {
    fs.mkdirSync(frontendAbiPath, { recursive: true });
  }

  contractNames.forEach(contractName => {
    const sourcePath = path.join(__dirname, '..', 'artifacts', 'contracts', `${contractName}.sol`, `${contractName}.json`);
    const targetPath = path.join(frontendAbiPath, `${contractName}.json`);

    try {
      if (fs.existsSync(sourcePath)) {
        const artifact = JSON.parse(fs.readFileSync(sourcePath, 'utf8'));
        fs.writeFileSync(targetPath, JSON.stringify(artifact.abi, null, 2));
        console.log(`✅ Copied ${contractName} ABI to frontend`);
      } else {
        console.log(`⚠️  ${contractName} artifact not found`);
      }
    } catch (error: any) {
      console.error(`❌ Error copying ${contractName} ABI:`, error.message);
    }
  });
}

main().catch((error) => {
  console.error("❌ Deployment failed:", error);
  process.exitCode = 1;
});
